{
  // -- Comment Snippets
	"10x-comment-section": {
		"prefix": "10x-comment-section",
		"body": [
			"// region:    --- ${1:Section}",
			"${2}$TM_SELECTED_TEXT",
			"// endregion: --- ${1:Section}"
		],
		"description": "Comment Section"
	},

	"10x-comment-delimiter": {
		"prefix": "10x-comment-delimiter",
		"body": [
			"// -- ${1}",
		],
		"description": "Comment Delimiter"
	},	

  // -- Modules Snippets

	"10x-modules-section": {
		"prefix": "10x-modules-section-01",
		"body": [
			"// region:    --- Modules",
			"${1}",
			"use ${2:crate}::{${3}Result};",
			"${4}",
			"// endregion: --- Modules"
		],
		"description": "Simple modules section (default `use crate::Error`)"
	},

	"10x-modules-with-error-section": {
		"prefix": "10x-modules-section-02-with-error",
		"body": [
			"// region:    --- Modules",
			"",
			"mod error;",
			"${1}",
			"pub use error::{Error, Result};",
			"",
			"// endregion: --- Modules"
		],
		"description": "Modules sections with module error"
	},		

	// -- Impl Snippets

	"10x-impl-from": {
		"prefix": "10x-impl-from",
		"body": [
			"impl From<${1:from_type}> for ${2:to_type} {",
			"\tfn from(val: ${1}) -> Self {",
			"\t\t$3",
			"\t}",
			"}"
		],
		"description": "impl From implementation"
	},	

	"10x-impl-try-from": {
		"prefix": "10x-impl-try-from",
		"body": [
			"impl TryFrom<${1:FromType}> for ${2:ToType} {",
			"\ttype Error = ${3:Error};",
			"\tfn try_from(val: ${1}) -> Result<${2}> {",
			"\t\t$4",
			"\t}",
			"}\n"
		],
		"description": "impl TryFrom implementation (assume Result<T> in scope)"
	},
	
	// -- Wrapper Snippets

	"10x-wrap-option": {
		"prefix": "10x-wrap-option",
		"body": [
			"Option<${1:$TM_SELECTED_TEXT}>"
		],
		"description": "Wrap Selection as Option<Selection>"
	},

	"10x-wrap-result": {
		"prefix": "10x-wrap-result",
		"body": [
			"Result<${1:$TM_SELECTED_TEXT}>"
		],
		"description": "Wrap Selection as Result<Selection>"
	},

	"10x-wrap-vec": {
		"prefix": "10x-wrap-vec",
		"body": [
			"Vec<${1:$TM_SELECTED_TEXT}>"
		],
		"description": "Wrap Selection as Vec<Selection>"
	},

	"10x-wrap-arc": {
		"prefix": "10x-wrap-arc",
		"body": [
			"Arc<${1:$TM_SELECTED_TEXT}>"
		],
		"description": "Wrap Selection as Arc<Selection>"
	},	
  
	// -- Functions

	"10x-fn": {
		"prefix": "10x-fn-01",
		"body": [
			"fn ${1:fn_name}(${2}) -> Result<${3:()}> {",
			"\t${4}",
			"\t${5:todo!()}",
			"}"
		],
	},	

	"10x-pub-fn": {
		"prefix": "10x-fn-02-pub-fn",
		"body": [
			"pub fn ${1:fn_name}(${2}) -> Result<${3:()}> {",
			"\t${4}",
			"\t${5:todo!()}",
			"}"
		],
	},		

	"10x-async-fn": {
		"prefix": "10x-fn-03-async-fn",
		"body": [
			"async fn ${1:fn_name}(${2}) -> Result<${3:()}> {",
			"\t${4}",
			"\t${5:todo!()}",
			"}"
		],
	},

	"10x-pub-async-fn":{
		"prefix": "10x-fn-04-pub-async-fn",
		"body": [
			"pub async fn ${1:fn_name}(${2}) -> Result<${3:()}> {",
			"\t${4}",
			"\t${5:todo!()}",
			"}"
		],
	},

	// -- Error

	"10x-error-early-dev-box-dyn": {
		"prefix": "10x-error-early-dev-box-dyn", 
		"body": [
			"pub type Result<T> = core::result::Result<T, Error>;",
			"",
			"pub type Error = Box<dyn std::error::Error>; // For early dev.",
		],
		"description": "Early dev error.rs (Box<dyn ...Error> pattern)"
	},
	
	"10x-error-re-export-self-error-result": {
		"prefix": "10x-error-re-export-self-error-result", 
		"body": [
			"pub use self::error::{Error, Result};",
		],
		"description": "pub use of self Error/Result"
	},

	"10x-error-use-result-error": {
		"prefix": "10x-error-use-result-error",
		"body": [
			"use ${1:crate}::{${2}Result};"
		],
		"description": "use crate::{..,Result};"
	},	

	"10x-error-variant-with-from": {
		"prefix": "10x-error-variant-with-from",
		"body": [
			"#[from]",
			"${1:VariantName}(${2}${3:Error}),"
		],
		"description": "jc-error-variant"
	},

	// -- Debug

	"10x-debug-println": {
		"prefix": "10x-debug-println",
		"body": [ "println!(\"->> $1{$2}$3\"$4);"],
		"description": "println"
	},	

  // -- Test Snippets

	"10x-test-module": {
		"prefix": "10x-test-module-01",
		"body": [
			"// region:    --- Tests",
			"",
			"#[cfg(test)]",
			"mod tests {",
			"\ttype Error = Box<dyn std::error::Error>;",
			"\ttype Result<T> = core::result::Result<T, Error>; // For tests.",
			"",
			"\tuse super::*;",
			"",
			"\t$1",
			"}",
			"",
			"// endregion: --- Tests"
		],
		"description": "Unit test sub module boilerplate"
	},

	"10x-test-module-with-anyhow": {
		"prefix": "10x-test-module-02-with-anyhow",
		"body": [
			"// region:    --- Tests",
			"",
			"#[cfg(test)]",
			"mod tests {",
			"\tuse super::*;",
			"\tuse anyhow::Result;",
			"",
			"\t$1",
			"}",
			"",
			"// endregion: --- Tests"
		],
		"description": "Unit test sub module boilerplate"
	},	

	"10x-test-fn-with-comment-scaffolding": {
		"prefix": "10x-test-fn-01-with-comment-scaffolding",
		"body": [
			"#[test]",
			"fn test_${1:name}() -> Result<()> {",
			"\t// -- Setup & Fixtures",
			"\t${2}",
			"\t// -- Exec",
			"\t",
			"\t// -- Check",
			"\t",
			"\t// -- Clean",
			"\t",			
			"\tOk(())",
			"}"
		],
		"description": "Unit test function with comment scaffolding"
	},	

	"10x-test-fn-simple": {
		"prefix": "10x-test-fn-02-simple",
		"body": [
			"#[test]",
			"fn test_${1:name}() -> Result<()> {",
			"\t${2}",
			"",
			"\tOk(())",
			"}"
		],
		"description": "Unit test function with comment scaffolding"
	},		

	"10x-test-async-fn-with-comment-scaffolding": {
		"prefix": "10x-test-async-fn-01-with-comment-scaffolding",
		"body": [
			"#[tokio::test]",
			"async fn test_${1:name}() -> Result<()> {",
			"\t// -- Setup & Fixtures",
			"\t${2}",
			"\t// -- Exec",
			"\t",
			"\t// -- Check",
			"\t",
			"\t// -- Clean",
			"\t",			
			"\tOk(())",
			"}"
		],
		"description": "Unit test function with comment scaffolding"
	},	

	"10x-test-async-fn-simple": {
		"prefix": "10x-test-async-fn-02-simple",
		"body": [
			"#[tokio::test]",
			"async fn test_${1:name}() -> Result<()> {",
			"\t${2}",
			"\t",
			"\tOk(())",
			"}"
		],
		"description": "Unit test function with comment scaffolding"
	},		

}